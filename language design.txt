------------------------------------------编程中万变不离其宗的东西，也是一个开发者最重要的理解---------------
操作系统的发展：
4个需求
存储需求=》电磁转换，信号之间的转换=》磁性介质，磁带磁盘=>固态硬盘=>
搜索需求=>操作系统，文件系统=>
计算需求=>公式转化成计算机懂的=>设计语言
通信需求=>协议规范


语言
为什么要设计语言:
设计一个供人调用某些已存在功能的接口而已,sql=>db,c#=>.net,java=>jvm,都是为了提高生产力而已，大多数人不能掌握黑框框，但是能掌握oop！

怎么设计:
api：我需要什么api（好比我有了集合的筛选和包含 推导出 交集,[1,2,3].filter(x=>[2,3,4].indexOf(x)>=0)）
2个转化：数据  转化成 类()，思路决策 转化成 分而治之（switch），动态规划的代码(while)

优缺点:
优点：在计算机 存储，计算的能力上 加上了 人类不断进步的想法
缺点：应用场景有限，没有万能的语言。

------------------------------------------一些设计思想------------------------

组件化：
1：组件是独立的，写一次，可以任意组合到其他地方使用
2：组件数据的入口和出口，组件间的通信是如何传输数据，取出数据使用的，或者如果加上关系，如父子，A如何通过AB的关系调用B的数据或者方法

模板解析：
按照一定规则解析组件=》导致你写组件代码必须按照某种固定的模式！使用固定的符号！不然无法识别！


简化代码=>函数式编程：


能解决复杂问题，容易把想法和图转化成代码实现=》
分而治之：
把逻辑层层划分，代码由简到繁


动态规划：
关系链移动

框架的本质：
设计通用的入口和出口
对配置，注解，继承等标记方式的识别
相应的代码生成器
diff算法，拓扑算法或某些核心算法的使用
单例，监听等模式的使用


